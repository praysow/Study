import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
path = "c:/_data/project/mini/"

인원 = pd.read_csv(path + "2023년 1~8월 이용인원.csv",index_col=0)
날씨 = pd.read_csv(path + "날씨.csv",index_col=0)
지연 = pd.read_csv(path + "지연.csv",index_col=0)
혼잡 = pd.read_csv(path + "혼잡.csv",index_col=0)
버스 = pd.read_csv(path + "버스.csv",index_col=0)

print(인원.shape,날씨.shape)            #(132598, 27) (8760, 27)
print(지연.shape,혼잡.shape,버스.shape) #(1215, 5) (1658, 45) (1242090, 9)

# 날씨.to_csv(path + "날씨.csv")
lb = LabelEncoder()
# 라벨 인코딩할 열 목록
lb_iw = ['호선','역명','구분']
lb_ns = []
lb_jy = ['노선','지연시간대']
lb_hj = ['요일구분','출발역','상하구분']
lb_bus = ['노선명','역명']

# 데이터프레임 인원의 열에 대해 라벨 인코딩 수행
for column in lb_iw:
    lb.fit(인원[column])
    인원[column] = lb.transform(인원[column])

# 데이터프레임 날씨의 열에 대해 라벨 인코딩 수행
for column in lb_ns:
    lb.fit(날씨[column])
    날씨[column] = lb.transform(날씨[column])

# 데이터프레임 지연의 열에 대해 라벨 인코딩 수행
for column in lb_jy:
    lb.fit(지연[column])
    지연[column] = lb.transform(지연[column])

# 데이터프레임 혼잡의 열에 대해 라벨 인코딩 수행
for column in lb_hj:
    lb.fit(혼잡[column])
    혼잡[column] = lb.transform(혼잡[column])

# 데이터프레임 버스의 열에 대해 라벨 인코딩 수행
for column in lb_bus:
    lb.fit(버스[column])
    버스[column] = lb.transform(버스[column])
# 데이터프레임에서 "-"를 다른 문자열로 변경
# 인원.replace("-", "", inplace=True)
# 날씨.replace("-", "", inplace=True)
# 지연.replace("-", "", inplace=True)
# 혼잡.replace("-", "", inplace=True)
# 버스.replace("-", "", inplace=True)
# print(인원.describe())
# mean        3.606012    1614.830359     123.809967       0.500000     131.507866     367.022052     913.254996    1557.157778  ...    1002.675425     694.809183     642.738548     546.126284     289.541230      77.604798   15417.009533    132.527209        
# std         2.003472    1172.883592      72.212742       0.500002     183.838891     380.701203    1161.257385    2199.428990  ...    1111.585392     772.825535     758.534710     665.848907     355.480714     118.433948   13080.029111    179.625905        
# min         0.000000     150.000000       0.000000       0.000000       0.000000       0.000000       0.000000       0.000000  ...       0.000000       0.000000       0.000000       0.000000       0.000000       0.000000       0.000000      0.000000        
# 25%         2.000000     317.000000      62.000000       0.000000      32.000000     124.000000     214.000000     371.000000  ...     327.000000     242.000000     217.000000     173.000000      84.000000       9.000000    6862.000000     32.000000        
# 50%         4.000000    2527.000000     125.000000       0.500000      67.000000     240.000000     460.000000     837.000000  ...     652.000000     454.000000     414.000000     353.000000     189.000000      37.000000   11772.000000     69.000000        
# 75%         5.000000    2640.000000     188.000000       1.000000     159.000000     462.000000    1129.000000    1766.000000  ...    1221.750000     831.000000     750.000000     658.000000     359.000000     101.000000   19424.750000    161.000000        
# max         7.000000    2828.000000     246.000000       1.000000    4640.000000    3312.000000    9135.000000   19038.000000  ...   11520.000000   11042.000000   14150.000000   18966.000000    7524.000000    2249.000000  126352.000000   1698.000000
# print("날씨",날씨.describe())
# 날씨             기온(°C)      강수량(mm)      풍속(m/s)     풍향(16방위)        습도(%)     증기압(hPa)    이슬점온도(°C)    현지기압(hPa)    해면기압(hPa)  ...  최저운고(100m )      시정(10m)  지면상태(지면상태코드)     현상번호(국내식)     지면온도(°C)  5cm 지중온도(°C)  10cm 지중온도(°C)  20cm 지중온도(°C)  30cm 지중온도(°C)
# count  8760.000000  1087.000000  8723.000000  8723.000000  8760.000000  8760.000000  8760.000000  8760.000000  8760.000000  ...  4658.000000  8760.000000           0.0  2.423000e+03  8759.000000   8760.000000    8760.000000    8760.000000    8760.000000
# mean     14.106804     1.470837     2.279525   182.050900    66.637671    13.280457     7.374269  1005.542340  1015.757363  ...    15.358738  1849.368950           NaN  2.858811e+04    15.192419     14.585034      14.504954      14.178744      14.499806
# std      10.958475     3.482134     1.097665   107.760876    19.056798     9.104737    11.956282     8.378995     8.814233  ...    14.541061   871.119707           NaN  6.721426e+05    13.055664     10.310446      10.325476       9.865204       9.513600
# min     -17.200000     0.000000     0.000000     0.000000    15.000000     0.700000   -26.200000   981.400000   990.900000  ...     1.000000    23.000000           NaN  1.000000e+00   -11.400000     -3.600000      -3.500000      -2.200000      -0.400000    
# 25%       5.200000     0.000000     1.500000    50.000000    53.000000     5.200000    -2.200000   999.400000  1009.275000  ...     7.000000  1418.000000           NaN  1.000000e+00     3.300000      4.800000       4.900000       5.300000       6.200000    
# 50%      15.600000     0.200000     2.200000   230.000000    68.000000    10.900000     8.300000  1005.100000  1015.300000  ...    10.000000  2000.000000           NaN  1.900000e+01    15.500000     15.500000      15.800000      15.400000      15.600000    
# 75%      23.500000     1.300000     2.900000   270.000000    82.000000    21.225000    18.425000  1011.700000  1022.300000  ...    15.750000  2000.000000           NaN  1.901000e+03    24.500000     24.400000      24.400000      23.700000      23.800000    
# max      35.800000    34.700000     8.100000   360.000000   100.000000    34.800000    26.600000  1027.400000  1038.900000  ...    76.000000  5000.000000           NaN  1.916020e+07    58.000000     32.900000      32.000000      30.000000      29.100000 
# print("지연",지연.describe())
# 지연                 노선        지연시간대
# count  1215.000000  1215.000000
# mean      6.029630     1.723457
# std       4.286769     0.657664
# min       0.000000     0.000000
# 25%       3.000000     2.000000
# 50%       5.000000     2.000000
# 75%       7.000000     2.000000
# max      17.000000     2.000000
# print("혼잡",혼잡.describe())
# 혼잡               요일구분           호선          역번호          출발역         상하구분        5시30분        6시00분        6시30분        7시00분  ...       20시30분       21시00분       21시30분       22시00분       22시30분       23시00분       23시30분      00시00분      00시30분
# count  1658.000000  1658.000000  1658.000000  1658.000000  1658.000000  1622.000000  1648.000000  1648.000000  1648.000000  ...  1648.000000  1648.000000  1648.000000  1648.000000  1648.000000  1648.000000  1638.000000  552.000000  552.000000
# mean      0.998794     4.591074  1606.132690   121.434258     1.815440    14.847472    14.664927    14.335012    18.583374  ...    23.935316    25.028277    24.159345    24.570874    21.176335    17.900182    12.914591    8.540761    6.257065
# std       0.816988     1.994674  1173.306922    71.166076     1.072936    13.471581    10.459570    11.787235    18.035939  ...    14.887945    15.496555    15.883566    16.521823    14.179140    12.497021     9.990462    6.446568    5.353933
# min       0.000000     1.000000   150.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000  ...     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000    0.000000    0.000000
# 25%       0.000000     3.000000   317.000000    60.000000     1.000000     6.400000     7.600000     6.800000     7.475000  ...    12.900000    12.975000    12.100000    12.400000    10.600000     8.800000     5.400000    3.900000    2.100000
# 50%       1.000000     5.000000  2527.000000   122.000000     1.500000    10.800000    12.200000    10.900000    12.200000  ...    21.400000    23.200000    21.700000    21.900000    18.100000    15.400000    10.500000    7.700000    5.000000
# 75%       2.000000     6.000000  2640.000000   184.000000     3.000000    18.900000    18.900000    17.800000    22.400000  ...    32.700000    34.500000    32.900000    33.700000    28.625000    24.900000    18.100000   11.700000    9.100000
# max       2.000000     8.000000  2828.000000   242.000000     3.000000   109.000000    66.800000    74.900000   112.200000  ...   105.800000    88.000000   106.100000   100.000000    76.900000    73.800000    66.100000   38.100000   26.700000
print(np.unique(날씨,return_counts=True))
# 날씨 = 날씨.values.reshape(8760,26,1)
# print(pd.value_counts(날씨))